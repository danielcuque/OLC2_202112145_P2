/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

    import { DataType, getToken, Operator } from "../compiler/utils";
    import errors from "../compiler/error";
	import symbols from "../compiler/symbols";

    import {
		IncrementalAssignment,
		DynamicListValue,
		VectorAssignment,
		VectorPosition,
		FunctionBlock,
		ExpAssignment,
		ContinueValue,
		FunctionCall,
		CycleControl,
		Declaration,
		VectorValue,
		ReturnValue,
		ToCharArray,
		Expression,
		BreakValue,
		Print,
		Condition,
		ToString,
		GetValue,
		SetValue,
		Truncate,
		ToLower,
		ToUpper,
		ForLoop,
		TypeOf,
		Switch,
		Length,
		Add,
		Round,
		Value,
		Main,
	} from "../compiler/statements"


        // AGREGAR TOKEN
        const addToken = (yylloc: any, tokenName: any) => {
			/*symbols.push({ ...getToken(yylloc), tokenName });*/
			return tokenName;
		};



import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType, o } from '@ts-jison/parser';const $V0=[1,4],$V1=[1,31],$V2=[1,32],$V3=[1,33],$V4=[1,34],$V5=[1,35],$V6=[1,36],$V7=[1,14],$V8=[1,37],$V9=[1,22],$Va=[1,39],$Vb=[1,23],$Vc=[1,27],$Vd=[1,40],$Ve=[1,41],$Vf=[1,42],$Vg=[1,28],$Vh=[1,29],$Vi=[1,30],$Vj=[1,46],$Vk=[5,7,8,9,10,11,12,17,29,33,43,84,90,99,103,105,107,111,112,113,115,116,117],$Vl=[2,25],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,58],$Vq=[21,32,78],$Vr=[1,71],$Vs=[1,96],$Vt=[1,69],$Vu=[1,70],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,66],$VA=[1,65],$VB=[1,67],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,94],$VG=[1,95],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[14,33,43,78],$VL=[1,103],$VM=[1,107],$VN=[21,32],$VO=[1,110],$VP=[1,133],$VQ=[1,134],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,127],$VW=[1,128],$VX=[1,129],$VY=[1,130],$VZ=[1,131],$V_=[1,132],$V$=[1,135],$V01=[1,136],$V11=[13,14,17,21,32,44,64,65,66,67,68,69,70,71,72,73,74,75,78,79,80],$V21=[1,164],$V31=[1,173],$V41=[1,178],$V51=[17,32,78],$V61=[13,14,17,21,32,44,64,65,66,67,68,73,78,79,80],$V71=[32,78],$V81=[13,14,17,21,32,44,65,66,67,68,78,79,80],$V91=[13,14,17,21,32,44,64,65,66,67,68,69,70,71,72,73,78,79,80],$Va1=[5,7,8,9,10,11,12,17,29,33,43,84,90,99,100,103,105,107,111,112,113,115,116,117],$Vb1=[1,259],$Vc1=[1,271],$Vd1=[17,105,107];

export class TypeWiseParser extends JisonParser implements JisonParserApi {
    $?: any;

    constructor (yy = {}, lexer = new TypeWiseLexer(yy)) {
      super(yy, lexer);
    }

    symbols_: SymbolsType = {"error":2,"START":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"intType":7,"dblType":8,"boolType":9,"charType":10,"strType":11,"listRw":12,"minor":13,"major":14,"BLOCKCONTENT":15,"openBracket":16,"closeBracket":17,"INSTRUCTION":18,"MAIN":19,"DECLARATION":20,"semicolom":21,"ASSIGNMENT":22,"METHODS":23,"FUNCTION":24,"CONTROLSEQ":25,"LOOPSEQ":26,"SWITCHSEQ":27,"LOOPESCAPE":28,"mainRw":29,"FUNCTIONCALL":30,"ASSIGNMENTS":31,"comma":32,"id":33,"equals":34,"EXPRESSIONS":35,"TERNARY":36,"INCREMENTALASSIGNMENT":37,"NEWVECTORASSIGNMENT":38,"VECTORASSIGNMENT":39,"plusPlus":40,"minusMinus":41,"VECTORVALUE":42,"openSquareBracket":43,"closeSquareBracket":44,"newRw":45,"EXPLIST":46,"VARVALUE":47,"decimal":48,"text":49,"integer":50,"character":51,"trBool":52,"flBool":53,"TOLOWER":54,"TOUPPER":55,"LENGTHSEQ":56,"TYPEOFSEQ":57,"TOSTRINGSEQ":58,"TOCHARARRAY":59,"TRUNCATE":60,"ROUND":61,"GETVALUE":62,"DYNAMICLISTVALUE":63,"plus":64,"equalsEquals":65,"moreOrEquals":66,"lessOrEquals":67,"nonEquals":68,"division":69,"module":70,"power":71,"times":72,"minus":73,"and":74,"or":75,"not":76,"openParenthesis":77,"closeParenthesis":78,"questionMark":79,"colom":80,"PARAMSLIST":81,"PARAMVAR":82,"FUNCTIONPARAMS":83,"voidType":84,"APPEND":85,"SETVALUE":86,"PRINT":87,"dot":88,"addRw":89,"printRw":90,"toLowerRw":91,"toUpperRw":92,"lengthRw":93,"truncateRw":94,"roundRw":95,"typeOfRw":96,"toStringRw":97,"toCharArrayRw":98,"ifRw":99,"elseRw":100,"CONTROLSEQELIFS":101,"CONTROLSEQELIF":102,"switchRw":103,"SWITCHSEQCASES":104,"defaultRw":105,"SWITCHSEQCONTENT":106,"caseRw":107,"WHILESEQ":108,"DOWHILESEQ":109,"FORSEQ":110,"whileRw":111,"doRw":112,"forRw":113,"FORSEQPARAMS":114,"breakRw":115,"continueRw":116,"returnRw":117,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",7:"intType",8:"dblType",9:"boolType",10:"charType",11:"strType",12:"listRw",13:"minor",14:"major",16:"openBracket",17:"closeBracket",21:"semicolom",29:"mainRw",32:"comma",33:"id",34:"equals",40:"plusPlus",41:"minusMinus",43:"openSquareBracket",44:"closeSquareBracket",45:"newRw",48:"decimal",49:"text",50:"integer",51:"character",52:"trBool",53:"flBool",64:"plus",65:"equalsEquals",66:"moreOrEquals",67:"lessOrEquals",68:"nonEquals",69:"division",70:"module",71:"power",72:"times",73:"minus",74:"and",75:"or",76:"not",77:"openParenthesis",78:"closeParenthesis",79:"questionMark",80:"colom",84:"voidType",88:"dot",89:"addRw",90:"printRw",91:"toLowerRw",92:"toUpperRw",93:"lengthRw",94:"truncateRw",95:"roundRw",96:"typeOfRw",97:"toStringRw",98:"toCharArrayRw",99:"ifRw",100:"elseRw",103:"switchRw",105:"defaultRw",107:"caseRw",111:"whileRw",112:"doRw",113:"forRw",115:"breakRw",116:"continueRw",117:"returnRw"};
    productions_: ProductionsType = [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,4],[15,3],[4,2],[4,2],[4,1],[4,1],[18,2],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,1],[19,3],[20,2],[31,3],[31,1],[22,1],[22,3],[22,3],[22,1],[22,1],[22,1],[37,2],[37,2],[39,3],[39,3],[38,9],[38,7],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[63,5],[42,4],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,2],[35,3],[35,4],[35,1],[35,3],[36,5],[46,3],[46,1],[81,3],[81,1],[82,2],[82,4],[83,3],[83,2],[24,4],[24,6],[24,4],[30,4],[30,3],[23,1],[23,1],[23,1],[23,1],[85,6],[62,6],[86,8],[87,4],[54,4],[55,4],[56,4],[60,4],[61,4],[57,4],[58,4],[59,4],[25,5],[25,7],[25,6],[25,8],[101,2],[101,1],[102,6],[27,7],[27,10],[27,9],[104,2],[104,1],[106,4],[26,1],[26,1],[26,1],[108,5],[109,7],[110,5],[114,5],[114,5],[28,2],[28,2],[28,3]];
    table: Array<StateType> = [{2:$V0,3:1,4:2,6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,18:3,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},{1:[3]},{5:[1,43],6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,18:44,19:45,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$Vj,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},o($Vk,[2,11]),o($Vk,[2,12]),{21:[1,47]},{21:[1,48]},{21:[1,49]},o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),{22:52,31:50,33:[1,51],37:15,38:16,39:17,42:38,43:$V8},{21:$Vl,34:$Vm,40:$Vn,41:$Vo,43:[1,57],77:$Vp,88:[1,56]},o($Vq,[2,28]),o($Vq,[2,29]),o($Vq,[2,30]),{21:[2,92]},{21:[2,93]},{21:[2,94]},{21:[2,95]},{33:[1,59]},{77:[1,60]},o($Vk,[2,121]),o($Vk,[2,122]),o($Vk,[2,123]),{77:[1,61]},{21:[1,62]},{21:[1,63]},{30:84,33:$Vr,35:64,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($VK,[2,2]),o($VK,[2,3]),o($VK,[2,4]),o($VK,[2,5]),o($VK,[2,6]),{13:[1,97]},{44:[1,98]},{34:[1,99]},{77:[1,100]},{77:[1,101]},{15:102,16:$VL},{77:[1,104]},{1:[2,1]},o($Vk,[2,9]),o($Vk,[2,10]),{30:105,33:[1,106]},o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),{21:[2,22],32:$VM},o($VN,$Vl,{83:108,34:$Vm,40:$Vn,41:$Vo,43:[1,109],77:$VO}),o($VN,[2,24]),{30:84,33:$Vr,35:111,36:112,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($Vq,[2,31]),o($Vq,[2,32]),{89:[1,113]},{30:84,33:$Vr,35:115,42:86,43:[1,114],45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:118,42:86,45:$Vs,46:116,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,78:[1,117],91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{77:$VO,83:119},{30:84,33:$Vr,35:120,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:121,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($Vk,[2,129]),o($Vk,[2,130]),{13:$VP,14:$VQ,21:[1,122],64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01},{30:84,33:$Vr,35:137,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:138,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{6:140,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,30:84,33:$Vr,35:139,36:141,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($V11,[2,76]),o($V11,[2,37]),o($V11,[2,38]),o($V11,[2,39],{43:[1,142],77:$Vp}),o($V11,[2,40]),o($V11,[2,41]),o($V11,[2,42]),o($V11,[2,43]),o($V11,[2,44]),o($V11,[2,45]),o($V11,[2,46]),o($V11,[2,47]),o($V11,[2,48]),o($V11,[2,49]),o($V11,[2,50]),o($V11,[2,51]),o($V11,[2,52]),o($V11,[2,53]),o($V11,[2,54]),o($V11,[2,55]),{77:[1,143]},{77:[1,144]},{77:[1,145]},{77:[1,146]},{77:[1,147]},{77:[1,148]},{77:[1,149]},{77:[1,150]},{12:[1,151]},{6:152,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6},{33:[1,153]},{30:84,33:$Vr,35:154,36:155,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:156,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:157,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{111:[1,158]},{2:$V0,4:159,6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,18:3,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},{6:163,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,20:161,22:52,31:162,33:$V21,37:15,38:16,39:17,42:38,43:$V8,114:160},{21:[1,165]},{77:$Vp},{22:166,33:$V21,37:15,38:16,39:17,42:38,43:$V8},{15:167,16:$VL},{30:84,33:$Vr,35:115,42:86,44:[1,168],45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{6:172,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,78:[1,170],81:169,82:171},o($Vq,[2,26],{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,79:$V31}),o($Vq,[2,27]),{77:[1,174]},{30:84,33:$Vr,35:175,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{13:$VP,14:$VQ,44:[1,176],64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01},{32:$V41,78:[1,177]},o($V11,[2,91]),o($V51,[2,80],{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),{15:179,16:$VL},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,180]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,181]},o($Vk,[2,131]),{30:84,33:$Vr,35:182,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:183,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:184,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:185,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:186,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:187,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:188,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:189,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:190,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:191,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:192,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:193,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:194,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:195,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($V11,[2,72]),o($V61,[2,73],{69:$VW,70:$VX,71:$VY,72:$VZ,74:$V$,75:$V01}),{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,196],79:$V31},{78:[1,197]},{78:[1,198]},{30:84,33:$Vr,35:115,42:86,43:[1,199],45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:200,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:201,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:202,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:203,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:204,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:205,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:206,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:207,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{13:[1,208]},{14:[1,209]},{34:[1,210]},o($Vq,[2,33],{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,79:$V31}),o($Vq,[2,34]),{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,211]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,212]},{77:[1,213]},{6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,17:[1,214],18:44,19:45,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$Vj,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},{78:[1,215]},{21:[1,216]},{21:[1,217],32:$VM},{22:52,31:50,33:$V21,37:15,38:16,39:17,42:38,43:$V8},o($Vq,$Vl,{34:$Vm,40:$Vn,41:$Vo,43:[1,218]}),o($Vk,[2,21]),o($VN,[2,23]),o($Vk,[2,87]),{77:$VO,83:219},{32:[1,221],78:[1,220]},{16:[2,86]},o($V71,[2,82]),{33:[1,222]},{30:84,33:$Vr,35:223,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:224,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{13:$VP,14:$VQ,44:[1,225],64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01},o([13,14,17,21,32,34,44,64,65,66,67,68,69,70,71,72,73,74,75,78,79,80],[2,57]),o($V11,[2,90]),{30:84,33:$Vr,35:226,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($Vk,[2,89]),{15:227,16:$VL},{16:[1,228]},o($V61,[2,58],{69:$VW,70:$VX,71:$VY,72:$VZ,74:$V$,75:$V01}),o($V81,[2,59],{64:$VR,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),o($V81,[2,60],{64:$VR,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),o($V81,[2,61],{64:$VR,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),o($V81,[2,62],{64:$VR,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),o($V91,[2,63],{74:$V$,75:$V01}),o($V91,[2,64],{74:$V$,75:$V01}),o($V91,[2,65],{74:$V$,75:$V01}),o($V91,[2,66],{74:$V$,75:$V01}),o($V61,[2,67],{69:$VW,70:$VX,71:$VY,72:$VZ,74:$V$,75:$V01}),o($V81,[2,68],{64:$VR,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),o($V81,[2,69],{64:$VR,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),o($V11,[2,70]),o($V11,[2,71]),o($V11,[2,74]),{30:84,33:$Vr,35:229,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($V11,[2,77]),{30:84,33:$Vr,35:230,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,231]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,232]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,233]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,234]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,235]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,236]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,237]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,238]},{6:239,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6},o($VK,[2,7]),{16:[1,241],45:[1,240]},{21:[2,99]},{15:242,16:$VL},{30:84,33:$Vr,35:243,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($Va1,[2,8]),{15:244,16:$VL},{30:84,33:$Vr,35:245,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:246,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{30:84,33:$Vr,35:115,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{15:247,16:$VL},{16:[2,85]},{6:172,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,82:248},o($V71,[2,83],{43:[1,249]}),{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,80:[1,250]},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,251]},{44:[1,252]},o($V51,[2,79],{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),o($Vk,[2,108],{101:254,102:255,100:[1,253]}),{104:256,105:[1,257],106:258,107:$Vb1},o($V11,[2,75]),{13:$VP,14:$VQ,44:[1,260],64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01},o($V11,[2,100]),o($V11,[2,101]),o($V11,[2,102]),o($V11,[2,105]),o($V11,[2,106]),o($V11,[2,107]),o($V11,[2,103]),o($V11,[2,104]),{14:[1,261]},{6:262,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6},{30:84,33:$Vr,35:118,42:86,45:$Vs,46:263,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($Vk,[2,124]),{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,264]},o($Vk,[2,126]),{13:$VP,14:$VQ,21:[1,265],64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01},{13:$VP,14:$VQ,21:[1,266],64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01},o($Vk,[2,88]),o($V71,[2,81]),{44:[1,267]},{30:84,33:$Vr,35:268,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{21:[2,96]},{34:[1,269]},{15:270,16:$VL,99:$Vc1},o($Vk,[2,110],{102:273,100:[1,272]}),o($Va1,[2,113]),{17:[1,274],105:[1,275],106:276,107:$Vb1},{80:[1,277]},o($Vd1,[2,119]),{30:84,33:$Vr,35:278,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},{44:[1,279]},o($V11,[2,56]),{43:[1,280]},{17:[1,281],32:$V41},{21:[1,282]},{22:283,33:$V21,37:15,38:16,39:17,42:38,43:$V8},{22:284,33:$V21,37:15,38:16,39:17,42:38,43:$V8},o($V71,[2,84]),o($Vq,[2,78],{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01}),{30:84,33:$Vr,35:285,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($Vk,[2,109]),{77:[1,286]},{15:287,16:$VL,99:$Vc1},o($Va1,[2,112]),o($Vk,[2,115]),{80:[1,288]},o($Vd1,[2,118]),{2:$V0,4:289,6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,18:3,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,80:[1,290]},o($V11,[2,97]),{30:84,33:$Vr,35:291,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($Vq,[2,36]),o($Vk,[2,125]),{78:[2,127]},{78:[2,128]},{13:$VP,14:$VQ,21:[2,98],64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01},{30:84,33:$Vr,35:292,42:86,45:$Vs,47:68,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:76,55:77,56:78,57:79,58:80,59:81,60:82,61:83,62:85,63:87,73:$Vz,76:$VA,77:$VB,91:$VC,92:$VD,93:$VE,94:$VF,95:$VG,96:$VH,97:$VI,98:$VJ},o($Vk,[2,111]),{2:$V0,4:293,6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,18:3,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},{6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,17:[1,294],18:44,19:45,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$Vj,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},{2:$V0,4:295,6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,18:3,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},{13:$VP,14:$VQ,44:[1,296],64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01},{13:$VP,14:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX,71:$VY,72:$VZ,73:$V_,74:$V$,75:$V01,78:[1,297]},{6:13,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,17:[1,298],18:44,19:45,20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,29:$Vj,30:20,33:$V7,37:15,38:16,39:17,42:38,43:$V8,84:$V9,85:18,86:19,87:21,90:$Va,99:$Vb,103:$Vc,108:24,109:25,110:26,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi},o($Vk,[2,117]),o($Vd1,[2,120],{20:5,22:6,23:7,24:8,25:9,26:10,27:11,28:12,6:13,37:15,38:16,39:17,85:18,86:19,30:20,87:21,108:24,109:25,110:26,42:38,18:44,19:45,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:$V6,29:$Vj,33:$V7,43:$V8,84:$V9,90:$Va,99:$Vb,103:$Vc,111:$Vd,112:$Ve,113:$Vf,115:$Vg,116:$Vh,117:$Vi}),o($Vq,[2,35]),{15:299,16:$VL},o($Vk,[2,116]),o($Va1,[2,114])];
    defaultActions: {[key:number]: any} = {18:[2,92],19:[2,93],20:[2,94],21:[2,95],43:[2,1],170:[2,86],211:[2,99],220:[2,85],251:[2,96],283:[2,127],284:[2,128]};

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:

        return $$[$0-1]; 
    
break;
case 2:
 
        this.$ = DataType.INTEGER; 
    
break;
case 3:
 
        this.$ = DataType.DOUBLE; 
    
break;
case 4:
 
        this.$ = DataType.BOOLEAN; 
    
break;
case 5:
 
        this.$ = DataType.CHARACTER; 
    
break;
case 6:
 
        this.$ = DataType.STRING; 
    
break;
case 7:

        this.$ = `${DataType.DYNAMICLIST}<${$$[$0-1]}>`
    
break;
case 8: case 13: case 14: case 15: case 77: case 85:

        this.$ = $$[$0-1];
    
break;
case 9: case 10: case 112: case 118:

        this.$ = $$[$0-1];
        this.$.push($$[$0]);
    
break;
case 11: case 24: case 80: case 82: case 113: case 119:

        this.$ = [$$[$0]];
    
break;
case 12:
 console.error(
        _$[$0].last_line, _$[$0].last_column, yytext
    ); 
break;
case 16: case 17: case 19: case 20: case 28: case 29: case 30: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 92: case 93: case 94: case 95:

        this.$ = $$[$0];
    
break;
case 18:

        this.$ = $$[$0];    
    
break;
case 21:

        this.$ = new Main(getToken(_$[$0-2]), $$[$0-1]);
    
break;
case 22:

        this.$ = new Declaration(getToken(_$[$0-1]), { type: $$[$0-1], assignments: $$[$0] });
    
break;
case 23: case 79: case 81:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);
    
break;
case 25:

        this.$ = new ExpAssignment(getToken(_$[$0]), { id: $$[$0] });
    
break;
case 26:

        this.$ = new ExpAssignment(getToken(_$[$0-2]), { id: $$[$0-2], exp: $$[$0] });  
    
break;
case 27:

        this.$ = new ExpAssignment(getToken(_$[$0-2]), { id: $$[$0-2], exp: $$[$0] });
    
break;
case 31:

        this.$ = new IncrementalAssignment(getToken(_$[$0-1]), { 
            id: $$[$0-1], operator: Operator.PLUSPLUS })
    
break;
case 32:

        this.$ = new IncrementalAssignment(getToken(_$[$0-1]), { 
            id: $$[$0-1], operator: Operator.MINUSMINUS })
    
break;
case 33: case 34:

        this.$ = new VectorPosition(getToken(_$[$0-2]), { 
            value: $$[$0-2], exp: $$[$0] });
    
break;
case 35:

        this.$ = new VectorAssignment(getToken(_$[$0-8]), { type: $$[$0-3], id: $$[$0-6], size: $$[$0-1] });
    
break;
case 36:

        this.$ = new VectorAssignment(getToken(_$[$0-6]), { id: $$[$0-4], defValues: $$[$0-1] });
    
break;
case 37:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.DOUBLE })
    
break;
case 38:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.STRING })
    
break;
case 39:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.ID })
    
break;
case 40:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.INTEGER })
    
break;
case 41:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.CHARACTER })
    
break;
case 42: case 43:

        this.$ = new Value(getToken(_$[$0]), { value: $$[$0], type: DataType.BOOLEAN })
    
break;
case 44: case 45:

        this.$ = $$[$0];   
    
break;
case 56:

        this.$ = new DynamicListValue(getToken(_$[$0-4]), { value: [], type: $$[$0-1] });
    
break;
case 57:

        this.$ = new VectorValue(getToken(_$[$0-3]), { 
            value: $$[$0-3], index: $$[$0-1], type: DataType.STRING });
    
break;
case 58:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.PLUS });
    
break;
case 59:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.EQUALSEQUALS });
    
break;
case 60:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MOREOREQUALS });
    
break;
case 61:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.LESSOREQUALS });
    
break;
case 62:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.NONEQUALS });
    
break;
case 63:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.DIVISION });
    
break;
case 64:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MODULE });
    
break;
case 65:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.POWER });
    
break;
case 66:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.TIMES });
    
break;
case 67:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MINUS });
    
break;
case 68:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MINOR });
    
break;
case 69:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.MAJOR });
    
break;
case 70:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator: Operator.AND });
    
break;
case 71:

        this.$ = new Expression(getToken(_$[$0-2]), { 
            left: $$[$0-2], right: $$[$0], operator:Operator.OR });
    
break;
case 72:

        this.$ = new Expression(getToken(_$[$0-1]), { 
            left: $$[$0], operator: Operator.NOT });
    
break;
case 73:

        this.$ = new Expression(getToken(_$[$0-1]), { 
            left: $$[$0], operator: Operator.NEGATION });
    
break;
case 74:

        this.$ = new Expression(getToken(_$[$0-2]), { left: $$[$0-1] });
    
break;
case 75:

        this.$ = new Expression(getToken(_$[$0-3]), { left: $$[$0] } );
    
break;
case 76:

        this.$ = new Expression(getToken(_$[$0]), { value: $$[$0] });
    
break;
case 78:

        this.$ = new Expression(getToken(_$[$0-4]), { 
            left: $$[$0-2], right: $$[$0], condition: $$[$0-4], operator: Operator.TERNARY })
    
break;
case 83:

        this.$ = { type: $$[$0-1], id: $$[$0] };
    
break;
case 84:

        this.$ = { type: DataType.ARRAY, id: $$[$0-2], generic: $$[$0-3] };
    
break;
case 86:

        this.$ = [];
    
break;
case 87:

        this.$ = new FunctionBlock(getToken(_$[$0-3]), { 
            id: $$[$0-2], type: $$[$0-3], params: $$[$0-1], content: $$[$0] });
    
break;
case 88:

        this.$ = new FunctionBlock(getToken(_$[$0-5]), { 
            id: $$[$0-4], type: DataType.ARRAY, generic: $$[$0-5] , params: $$[$0-1], content: $$[$0] });
    
break;
case 89:

        this.$ = new FunctionBlock(getToken(_$[$0-3]), { 
            id: $$[$0-2], type: 'void', params: $$[$0-1], content: $$[$0] });
    
break;
case 90:

        this.$ = new FunctionCall(getToken(_$[$0-3]), { params: $$[$0-1], id: $$[$0-3] })
    
break;
case 91:

        this.$ = new FunctionCall(getToken(_$[$0-2]), { params: [], id: $$[$0-2] })
    
break;
case 96:
 
        this.$ = new Add(getToken(_$[$0-5]), { id: $$[$0-5], params: [$$[$0-1]] });  
    
break;
case 97:


        this.$ = new GetValue(getToken(_$[$0-5]), { id: $$[$0-5], params: [$$[$0-2]] });
    
break;
case 98:

        this.$ = new SetValue(getToken(_$[$0-7]), { id: $$[$0-7], params: [$$[$0-4], $$[$0]] });
    
break;
case 99:

        this.$ = new Print(getToken(_$[$0-3]), { params: [$$[$0-1]] });
    
break;
case 100:

        this.$ = new ToLower(getToken(_$[$0-3]), { params: [$$[$0-1]] })
    
break;
case 101:

        this.$ = new ToUpper(getToken(_$[$0-3]), { params: [$$[$0-1]] })
    
break;
case 102:

        this.$ = new Length(getToken(_$[$0-3]), { params: [$$[$0-1]] })
    
break;
case 103:

        this.$ = new Truncate(getToken(_$[$0-3]), { params: [$$[$0-1]] })
    
break;
case 104:

        this.$ = new Round(getToken(_$[$0-3]), { params: [$$[$0-1]] })
    
break;
case 105:

        this.$ = new TypeOf(getToken(_$[$0-3]), { params: [$$[$0-1]] })
    
break;
case 106:

        this.$ = new ToString(getToken(_$[$0-3]), { params: [$$[$0-1]] });
    
break;
case 107:

        this.$ = new ToCharArray(getToken(_$[$0-3]), { params: [$$[$0-1]] });
    
break;
case 108:

        this.$ = new Condition(getToken(_$[$0-4]), { 
            valid: { exp: $$[$0-2], body: $$[$0] }
        })
    
break;
case 109:

        this.$ = new Condition(getToken(_$[$0-6]), { 
            valid: { exp: $$[$0-4], body: $$[$0-2] },
            inValid: { exp: $$[$0-4], body: $$[$0] }
        })
    
break;
case 110:

        this.$ = new Condition(getToken(_$[$0-5]), { 
            valid: { exp: $$[$0-3], body: $$[$0-1] },
            fallback: $$[$0]
        })
    
break;
case 111:

        this.$ = new Condition(getToken(_$[$0-7]), { 
            inValid: { exp: $$[$0-5], body: $$[$0] },
            valid: { exp: $$[$0-5], body: $$[$0-3] },
            fallback: $$[$0-2]
        })
    
break;
case 114:

        this.$ = { exp: $$[$0-2], body: $$[$0] };
    
break;
case 115:

        this.$ = new Switch(getToken(_$[$0-6]), { value: $$[$0-4], cases: $$[$0-1] })
    
break;
case 116:

        this.$ = new Switch(getToken(_$[$0-9]), { 
            value: $$[$0-7], cases: $$[$0-4], default: { body: $$[$0-1] } })
    
break;
case 117:

        this.$ = new Switch(getToken(_$[$0-8]), { 
            value: $$[$0-6], default: { body: $$[$0-1] } })
    
break;
case 120:

        this.$ = { case: $$[$0-2], body: $$[$0] };
    
break;
case 124:

        this.$ = new CycleControl(getToken(_$[$0-4]), { 
            condition: $$[$0-2], body: $$[$0] 
         })
    
break;
case 125:

        this.$ = new CycleControl(getToken(_$[$0-6]), { 
            condition: $$[$0-2], body: $$[$0-5], isDoLoop: true
         })
    
break;
case 126:

        this.$ = new ForLoop(getToken(_$[$0-4]), { ...$$[$0-2], body: $$[$0] })
    
break;
case 127:

        this.$ = { withDeclarations: true, 
        assignments: [$$[$0-4]], condition: $$[$0-2], modifiers: $$[$0] }
    
break;
case 128:

        this.$ = { assignments: $$[$0-4], condition: $$[$0-2], modifiers: $$[$0] }
    
break;
case 129:

        this.$ = new BreakValue(getToken(_$[$0-1]))
    
break;
case 130:

        this.$ = new ContinueValue(getToken(_$[$0-1]))
    
break;
case 131:

        this.$ = new ReturnValue(getToken(_$[$0-2]), { content: $$[$0-1] });
    
break;
        }
    }
}


/* generated by ts-jison-lex 0.3.0 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';
export class TypeWiseLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"TypeWise"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:toCharArray\b)/i,/^(?:List\b)/i,/^(?:print\b)/i,/^(?:setValue\b)/i,/^(?:getValue\b)/i,/^(?:truncate\b)/i,/^(?:toString\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:add\b)/i,/^(?:length\b)/i,/^(?:typeOf\b)/i,/^(?:round\b)/i,/^(?:main\b)/i,/^(?:with\b)/i,/^(?:new\b)/i,/^(?:else\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:QUOTES\b)/i,/^(?:PIPE_QUOTES\b)/i,/^(?:DOUBLE_PIPES\b)/i,/^(?:BREAKLINE\b)/i,/^(?:CARRETURN\b)/i,/^(?:TABULATION\b)/i,/^(?:NULLCHAR\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']?')/i,/^(?:[0-9]*\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* IGNORE */
      break;
    case 1:/* IGNORE */
      break;
    case 2:/* IGNORE */
      break;
    case 3:return addToken(yy_.yylloc, 'charType')
      break;
    case 4:return addToken(yy_.yylloc, 'voidType')
      break;
    case 5:return addToken(yy_.yylloc, 'boolType')
      break;
    case 6:return addToken(yy_.yylloc, 'strType')
      break;
    case 7:return addToken(yy_.yylloc, 'dblType')
      break;
    case 8:return addToken(yy_.yylloc, 'intType')
      break;
    case 9:return addToken(yy_.yylloc, 'trBool')
      break;
    case 10:return addToken(yy_.yylloc, 'flBool')
      break;
    case 11:return addToken(yy_.yylloc, 'lessOrEquals')
      break;
    case 12:return addToken(yy_.yylloc, 'moreOrEquals')
      break;
    case 13:return addToken(yy_.yylloc, 'equalsEquals')
      break;
    case 14:return addToken(yy_.yylloc, 'minusMinus')
      break;
    case 15:return addToken(yy_.yylloc, 'nonEquals')
      break;
    case 16:return addToken(yy_.yylloc, 'plusPlus')
      break;
    case 17:return addToken(yy_.yylloc, 'questionMark')
      break;
    case 18:return addToken(yy_.yylloc, 'colom')
      break;
    case 19:return addToken(yy_.yylloc, 'division')
      break;
    case 20:return addToken(yy_.yylloc, 'module')
      break;
    case 21:return addToken(yy_.yylloc, 'times')
      break;
    case 22:return addToken(yy_.yylloc, 'power')
      break;
    case 23:return addToken(yy_.yylloc, 'equals')
      break;
    case 24:return addToken(yy_.yylloc, 'minor')
      break;
    case 25:return addToken(yy_.yylloc, 'major')
      break;
    case 26:return addToken(yy_.yylloc, 'minus')
      break;
    case 27:return addToken(yy_.yylloc, 'plus')
      break;
    case 28:return addToken(yy_.yylloc, 'and')
      break;
    case 29:return addToken(yy_.yylloc, 'not')
      break;
    case 30:return addToken(yy_.yylloc, 'or')
      break;
    case 31:return addToken(yy_.yylloc, 'dot')
      break;
    case 32:return addToken(yy_.yylloc, 'comma')
      break;
    case 33:return addToken(yy_.yylloc, 'semicolom')
      break;
    case 34:return addToken(yy_.yylloc, 'openBracket')
      break;
    case 35:return addToken(yy_.yylloc, 'closeBracket')
      break;
    case 36:return addToken(yy_.yylloc, 'openParenthesis')
      break;
    case 37:return addToken(yy_.yylloc, 'closeParenthesis')
      break;
    case 38:return addToken(yy_.yylloc, 'openSquareBracket')
      break;
    case 39:return addToken(yy_.yylloc, 'closeSquareBracket')
      break;
    case 40:return addToken(yy_.yylloc, 'toCharArrayRw')
      break;
    case 41:return addToken(yy_.yylloc, 'listRw')
      break;
    case 42:return addToken(yy_.yylloc, 'printRw')
      break;
    case 43:return addToken(yy_.yylloc, 'setValueRw')
      break;
    case 44:return addToken(yy_.yylloc, 'getValueRw')
      break;
    case 45:return addToken(yy_.yylloc, 'truncateRw')
      break;
    case 46:return addToken(yy_.yylloc, 'toStringRw')
      break;
    case 47:return addToken(yy_.yylloc, 'toLowerRw')
      break;
    case 48:return addToken(yy_.yylloc, 'toUpperRw')
      break;
    case 49:return addToken(yy_.yylloc, 'addRw')
      break;
    case 50:return addToken(yy_.yylloc, 'lengthRw')
      break;
    case 51:return addToken(yy_.yylloc, 'typeOfRw')
      break;
    case 52:return addToken(yy_.yylloc, 'roundRw')
      break;
    case 53:return addToken(yy_.yylloc, 'mainRw')
      break;
    case 54:return addToken(yy_.yylloc, 'withRw')
      break;
    case 55:return addToken(yy_.yylloc, 'newRw')
      break;
    case 56:return addToken(yy_.yylloc, 'elseRw')
      break;
    case 57:return addToken(yy_.yylloc, 'ifRw')
      break;
    case 58:return addToken(yy_.yylloc, 'defaultRw')
      break;
    case 59:return addToken(yy_.yylloc, 'switchRw')
      break;
    case 60:return addToken(yy_.yylloc, 'breakRw')
      break;
    case 61:return addToken(yy_.yylloc, 'caseRw')
      break;
    case 62:return addToken(yy_.yylloc, 'whileRw')
      break;
    case 63:return addToken(yy_.yylloc, 'forRw')
      break;
    case 64:return addToken(yy_.yylloc, 'doRw')
      break;
    case 65:return addToken(yy_.yylloc, 'continueRw')
      break;
    case 66:return addToken(yy_.yylloc, 'returnRw')
      break;
    case 67:"\""
      break;
    case 68:"\\\""
      break;
    case 69:"\\\\"
      break;
    case 70:"\\n"
      break;
    case 71:"\\r"
      break;
    case 72:"\\t"
      break;
    case 73:"\\0"
      break;
    case 74: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return addToken(yy_.yylloc, 'text') 
      break;
    case 75: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return addToken(yy_.yylloc, 'text')
      break;
    case 76:return addToken(yy_.yylloc, 'decimal')
      break;
    case 77:return addToken(yy_.yylloc, 'integer')
      break;
    case 78:return addToken(yy_.yylloc, 'id')
      break;
    case 79:return 5
      break;
    case 80: errors.push({
                                type: 'Léxico',
                                token: { line: yy_.yylloc.first_line, col: yy_.yylloc.fist_column },
                                msg: `${yy_.yytext} no reconocido`
                            }); 
      break;
        }
    }
}

